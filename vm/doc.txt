/*
mov[b] r0, r1; r1[b] = r0[b]
movi   25, r0; r0    = 25
movze  r0, r1; r1    = zero_ext(r0b)
movse  r0, r1; r1    = sign_ext(r0b)

ld[b] r0, r1; r1[b]      = mem[b][r0]
st[b] r0, r1; mem[b][r1] = r0[b]

add[b] r0, r1; r1[b] = r1[b] + r0[b]
sub[b] r0, r1; r1[b] = r1[b] - r0[b]
inc[b] r0;     r0[b] = r0[b] + 1
dec[b] r0;     r0[b] = r0[b] - 1

cmp[b] r0, r1; z = r1[b] - r0[b] == 0,
               p = r1[b] - r0[b] > 0,
               n = r1[b] - r0[b] < 0

jmp flags addr;

flags:
     zpn
00000000 - 0
00000001 - 1 n
00000010 - 2 p
00000011 - 3 pn
00000100 - 4 z
00000101 - 5 zn
00000110 - 6 zp
00000111 - 7 zpn

jmp = 0
je  = z
jg  = p
jl  = n
jne = pn
jge = zp
jle = zn

msg:
	.stringz "hello, world\n"

_start:
	mov 0, r0
	mov msg, r1
	mov 0, r3

	jmp loop_test
loop:
	inc r3
loop_test:
	add r3, r1
	ldb r1, r2
	cmpb r0, r2
	jne loop

	mov SYS_WRITE, r0
	mov STDOUT, r1
	mov msg, r2
	syscall

	halt
*/
